# -*- coding: utf-8 -*-
"""P1_Python aplicado ao Data Science.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H2NNue2mem66qGCQ4BBm3Z1u-usD07EU
"""

#Questão 2

def verifica_par_ou_impar(numero):
    if numero % 2 == 0:
        return f"O número {numero} é par."
    else:
        return f"O número {numero} é ímpar."

# Exemplo de uso
numero = int(input("Digite um número inteiro: "))
resultado = verifica_par_ou_impar(numero)
print(resultado)

# Questão 5

soma = 0
for i in range(1, 101):
    soma += i
print("A soma dos números de 1 a 100 é:", soma)

def inverter_string(s):
    return s[::-1]

string_original = "exemplo"
string_invertida = inverter_string(string_original)
print(f"String original: {string_original}")
print(f"String invertida: {string_invertida}")

#Questão 7

def calcular_media_estudantes():
    # Lista para armazenar as médias
    medias = []

    # Loop para coletar e calcular a média de 10 estudantes
    for i in range(1, 11):
        print(f"Estudante {i}:")
        # Solicita as notas das três provas
        p1 = float(input("Digite a nota da P1: "))
        p2 = float(input("Digite a nota da P2: "))
        p3 = float(input("Digite a nota da P3: "))

        # Calcula a média aritmética
        media = (p1 + p2 + p3) / 3
        medias.append(media)

        # Imprime a média do estudante
        print(f"Média do Estudante {i}: {media:.2f}")
        print("-" * 20)

    return medias

# Exemplo de uso da função
medias_estudantes = calcular_media_estudantes()

#Questão 8

def tabuada(numero):
    print(f"Tabuada do {numero}:")
    for i in range(1, 11):
        resultado = numero * i
        print(f"{numero} x {i} = {resultado}")

# Exemplo de uso
numero = int(input("Digite um número inteiro: "))
tabuada(numero)

import math


print("Esse programa calculará o custo de uma barra em função de uma força")

print("Essa etapa calculará a tensão de trabalho em MPa")

tensão_de_escoamento = float(input("Digite a tensão de escoamento em MPa: "))

fator_de_segurança = float(input("Digite Fator de Segurança: "))

tensao_de_trabalho = tensão_de_escoamento / fator_de_segurança

print("A Tensão de Trabalho é: ", tensao_de_trabalho, "MPa")

print("Essa etapa calculará o diâmetro da barra em função de uma força")

Força_em_N =  float(input("Digite a força em N: "))

Número_de_barras =  int(input("Digite o número de barras: "))

Força_por_numero_de_barras = Força_em_N / Número_de_barras

tensão_de_trabalho_N_por_metro_quadrado = tensao_de_trabalho*10 **6

diametro_em_m = (math.sqrt((Força_por_numero_de_barras)/(tensão_de_trabalho_N_por_metro_quadrado*math.pi)))*2

diametro_em_cm = ((math.sqrt((Força_por_numero_de_barras)/(tensão_de_trabalho_N_por_metro_quadrado*math.pi)))*2)*100

diametro_em_mm = ((math.sqrt((Força_por_numero_de_barras)/(tensão_de_trabalho_N_por_metro_quadrado*math.pi)))*2)*1000

print("O diâmetro da barra é: ",diametro_em_m, "m")

print("O diâmetro da barra é: ",diametro_em_cm, "cm")

print("O diâmetro da barra é: ",diametro_em_mm, "mm")

print("Esta etapa irá calcular o volume e a massa da barra")

comprimento_em_cm = float(input("Digite o comprimento da barra em cm: "))

densidade = float(input("Digite a densidade em g/cm³: "))

área_em_cm2 = (math.pi*((diametro_em_cm/2)**2))

Volume_da_barra = área_em_cm2 * comprimento_em_cm

massa_da_barra = Volume_da_barra * densidade

print("A área em cm² é: ", área_em_cm2)

print("O volume em g/cm³ é: ", (Volume_da_barra))

print("A massa da barra em g é: ", (massa_da_barra))

print("A massa da barra em kg é: ", (massa_da_barra/1000))

print("Esta etapa irá calcular o custo da barra")

custo_do_material_por_quilo = float(input("Digite o custo do material por kg: "))

Massa_da_barra_kg = massa_da_barra/1000

Custo_da_barra = round(Massa_da_barra_kg * custo_do_material_por_quilo, 2)

print("O custo da barra em R$ é: ", Custo_da_barra)

# Heat map compósitos.mapa_calor()

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
# sphinx_gallery_thumbnail_number = 2

# def mapa_calor():
Compósitos = ["Epóxi e fibra de Aramida", "Epóxi e fibra de carbono", "Epóxi e fibra de vidro", "concreto",
              "Aço inoxidável 304", "PA 6,6", "Aço 1045"]
Fator_de_segurança = ["2,0", "2,5", "3,0.",
          "3,5", "4,0", "4,5", "5,0"]

harvest = np.array([[25.03, 31.29, 37.55, 43.8, 50.06, 56.32, 61.03],
                    [24.51, 30.64, 36.77, 42.89, 49.02, 55.15, 61.28],
                    [30.13, 37.67, 45.2, 52.73, 60.27, 67.8, 75.33],
                    [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],
                    [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],
                    [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],
                    [73.54, 91.92, 110.31, 128.69, 147.07, 165.46, Custo_da_barra]])


fig, ax = plt.subplots()
im = ax.imshow(harvest)

# We want to show all ticks...
ax.set_xticks(np.arange(len(Fator_de_segurança)))
ax.set_yticks(np.arange(len(Compósitos)))
# ... and label them with the respective list entries
ax.set_xticklabels(Fator_de_segurança)
ax.set_yticklabels(Compósitos)

# Rotate the tick labels and set their alignment.
plt.setp(ax.get_xticklabels(), rotation=45, ha="right",
        rotation_mode="anchor")

# Loop over data dimensions and create text annotations.
for i in range(len(Compósitos)):
    for j in range(len(Fator_de_segurança)):
        text = ax.text(j, i, harvest[i, j],
                      ha="center", va="center", color="w")

ax.set_title("Preço da barra em função do fator de segurança")
fig.tight_layout()
plt.show()

# ABS utilizado: Overview of materials for Acrylonitrile Butadiene Styrene (ABS), Molded

